version: '3.8'

services:
  redis:
    image: redis:7.2-alpine
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes", "--maxmemory", "2gb", "--maxmemory-policy", "allkeys-lru"]
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: meme_snipe_v25
      POSTGRES_USER: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  signer:
    build: 
      context: .
      dockerfile: ./signer/Dockerfile
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - RUST_LOG=${LOG_LEVEL:-info}
      - WALLET_KEYPAIR_PATH=/app/wallet/${WALLET_KEYPAIR_FILENAME}
    volumes:
      - ./${WALLET_KEYPAIR_FILENAME}:/app/wallet/${WALLET_KEYPAIR_FILENAME}:ro
    ports:
      - "8989:8989"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8989/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  backtest_engine:
    build:
      context: .
      dockerfile: ./backtest_engine/Dockerfile
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - REDIS_URL=${REDIS_URL}
      - DATABASE_URL=${DATABASE_URL}
      - BIRDEYE_API_KEY=${BIRDEYE_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    ports:
      - "8000:8000"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  strategy_factory:
    build: ./strategy_factory
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      backtest_engine:
        condition: service_started
    volumes:
      - ./shared:/app/shared
    environment:
      - REDIS_URL=${REDIS_URL}
      - POPULATION_SIZE=${POPULATION_SIZE:-50}
      - MUTATION_RATE=${MUTATION_RATE:-0.15}
      - CROSSOVER_RATE=${CROSSOVER_RATE:-0.7}
      - TOURNAMENT_SIZE=${TOURNAMENT_SIZE:-5}
      - TOP_SURVIVORS_RATIO=${TOP_SURVIVORS_RATIO:-0.2}
      - BACKTESTING_PLATFORM_API_KEY=${BACKTESTING_PLATFORM_API_KEY}
      - BACKTESTING_PLATFORM_URL=${BACKTESTING_PLATFORM_URL}
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  portfolio_manager:
    build: ./portfolio_manager
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      backtest_engine:
        condition: service_started
    environment:
      - REDIS_URL=${REDIS_URL}
      - DATABASE_URL=${DATABASE_URL}
      - PROMETHEUS_PORT=9100
      - REBALANCE_INTERVAL_SECS=${REBALANCE_INTERVAL_SECS:-300}
      - STRATEGY_PROMOTION_INTERVAL_SECS=${STRATEGY_PROMOTION_INTERVAL_SECS:-900}
      - HEARTBEAT_INTERVAL_SECS=${HEARTBEAT_INTERVAL_SECS:-60}
      - MIN_SHARPE_FOR_PROMOTION=${MIN_SHARPE_FOR_PROMOTION:-1.5}
      - NUM_STRATEGIES_PAPER=${NUM_STRATEGIES_PAPER:-5}
      - NUM_STRATEGIES_LIVE=${NUM_STRATEGIES_LIVE:-3}
      - CAPITAL_SCALAR_PAPER=${CAPITAL_SCALAR_PAPER:-1.5}
      - CAPITAL_SCALAR_LIVE=${CAPITAL_SCALAR_LIVE:-2.0}
      - GLOBAL_MAX_POSITION_USD=${GLOBAL_MAX_POSITION_USD:-50.0}
      - INITIAL_CAPITAL_USD=${INITIAL_CAPITAL_USD:-200.0}
      - BACKTESTING_PLATFORM_API_KEY=${BACKTESTING_PLATFORM_API_KEY}
      - BACKTESTING_PLATFORM_URL=${BACKTESTING_PLATFORM_URL}
    ports:
      - "9100:9100"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  market_data_gateway:
    build: 
      context: .
      dockerfile: ./market_data_gateway/Dockerfile
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    env_file: .env
    environment:
      - RUST_LOG=${LOG_LEVEL:-info}
    ports:
      - "9185:9185"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9185/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  executor:
    build: 
      context: .
      dockerfile: ./executor/Dockerfile
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      signer:
        condition: service_healthy
      portfolio_manager:
        condition: service_started
      market_data_gateway:
        condition: service_healthy
    ports: ["9184:9184"]
    env_file: .env
    environment:
      - RUST_LOG=${LOG_LEVEL:-info}
      - JITO_AUTH_KEYPAIR_PATH=/app/wallet/${JITO_AUTH_KEYPAIR_FILENAME}
    volumes:
      - ./shared:/app/shared
      - ./${JITO_AUTH_KEYPAIR_FILENAME}:/app/wallet/${JITO_AUTH_KEYPAIR_FILENAME}:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9184/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'

  position_manager:
    build: 
      context: .
      dockerfile: ./position_manager/Dockerfile
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      executor:
        condition: service_started
    env_file: .env
    environment:
      - RUST_LOG=${LOG_LEVEL:-info}
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  dashboard:
    build: 
      context: .
      dockerfile: ./dashboard/Dockerfile
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports: ["8080:5000"]
    env_file: .env
    volumes:
      - ./shared:/app/shared:ro
    environment:
      - FLASK_ENV=production
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  prometheus:
    image: prom/prometheus:v2.45.0
    restart: unless-stopped
    ports: ["9090:9090"]
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  grafana:
    image: grafana/grafana:10.2.2
    restart: unless-stopped
    ports: ["3000:3000"]
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=memesnipe
      - GF_INSTALL_PLUGINS=redis-datasource
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  redis-exporter:
    image: oliver006/redis_exporter:v1.52.0
    command: ["--redis.addr=redis://redis:6379"]
    restart: unless-stopped
    ports: ["9121:9121"]

  postgres-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter:v0.15.0
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:${DB_PASSWORD}@postgres:5432/meme_snipe_v25?sslmode=disable"
    restart: unless-stopped
    ports: ["9187:9187"]

volumes:
  redis-data:
  postgres-data:
  grafana-storage:
  prometheus-data:
